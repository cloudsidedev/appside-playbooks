---

# file: playbooks/roles/common/tasks/attic.yml

#
# IMPORTANT (TOFIX):
#
# We need ~/root/.ssh/config in place.
# During remote repo check we still don't know the remote host.
#
# TASK [common : check if remote attic repo exists] ******************************
#
# attic list attic@localhost:~/node-compute-XX.attic
# The authenticity of host 'localhost (127.0.0.1)' can't be established.
# ECDSA key fingerprint is ...
# Are you sure you want to continue connecting (yes/no)? yes
# Warning: Permanently added 'localhost' (ECDSA) to the list of known hosts.
#
# attic: Error: Repository attic@localhost:~/node-compute-XX.attic does not exist
#

#
# 10.04 (Attic is static)
#
#   wget --no-check-certificate https://attic-backup.org/downloads/releases/0.16/Attic-0.16-linux-x86_64.tar.gz
#   tar xfz Attic-0.16-linux-x86_64.tar.gz
#   mv Attic-0.16-linux-x86_64 /usr/local/bin/
#   cd /usr/local/bin
#   ln -s Attic-0.16-linux-x86_64/attic .
#   aptitude install python-software-properties
#   sudo add-apt-repository ppa:fkrull/deadsnakes
#   aptitude update
#   aptitude install python3.4-minimal
#   curl -O https://bootstrap.pypa.io/get-pip.py
#   python3.4 get-pip.py
#   sudo pip3 install --upgrade atticmatic
#   aptitude install libaio1
#   wget -c https://www.percona.com/downloads/XtraBackup/XtraBackup-2.0.0/deb/lucid/x86_64/percona-xtrabackup_2.0.0-417.lucid_amd64.deb
#   dpkg -i percona-xtrabackup_2.0.0-417.lucid_amd64.deb
#
# 14.04 LTS / Debian wheezy
#
#   https://voidtech.wordpress.com/2014/11/18/attic-install-using-pip-on-ubuntu-based-systems/
#
#   % sudo apt-get install build-essential python3-pip libssl-dev python3-dev libevent-dev uuid-dev libacl1-dev liblzo2-dev
#   % sudo apt-get install pkg-config
#   % sudo apt-get install libfuse-dev
#   % pip-3.2 install llfuse --upgrade  --timeout 300 (Debian family)
#
#   # sudo pip3 install attic --upgrade
#   % sudo pip-3.2 install attic --upgrade
#
# 12.04
#
#   sudo add-apt-repository ppa:fkrull/deadsnakes
#   aptitude install python3
#   wget https://bootstrap.pypa.io/get-pip.py
#   sudo apt-get install build-essential libssl-dev python3-dev libevent-dev uuid-dev libacl1-dev liblzo2-dev
#   python3 get-pip.py
#   pip3 install Attic
#
# OSX
#
#   brew install python3
#   sudo pip3 install attic --upgrade
#
# atticmatic:
#
#   % sudo pip3 install --upgrade atticmatic
#
#
# Usage over ssh:
#
#   attic init attic@backup:~/$(hostname -f).attic
#
#   # attic create attic@backup:~/$(hostname -f)::$(hostname -f)-$(date +%Y-%m-%d-%H:%M:%S) ~/
#   attic create attic@backup:~/$(hostname -f).attic::$(date +%Y-%m-%d-%H:%M:%S) ~/tmp
#
#
#   attic list attic@localhost:~/attic-repo.attic
#   attic check attic@localhost:~/attic-repo.attic
#
#   attic prune attic@backup:~/attic-repo.attic --keep-within=1d

#
#   Strategy: One repo per client in order to avoid lock conflicts.
#
#   0) attic user gets deployed through users.
#
#   1) Install pip packages
#
#   2) Check on backup server if repo exists, as attic user, if not initialize it.
#      On backup_server prepare folder "/var/archives-attic/hostname.attic"
#

#
#   VARS
#
#     conf_attic_repo
#     conf_attic_user
#     conf_attic_host

- name: be sure attic build packages are installed (Debian family)
  apt: pkg={{ item }} state=present
  with_items:
    # - build-essential
    - libacl1-dev
    - python3-pip
    - libssl-dev
  when: conf_attic_client == true and conf_attic_pip == true and ansible_os_family == "Debian"
  tags: [ attic, atticmatic ]

- name: ensure attic pip package is present
  pip: name=Attic executable=pip3 version=0.16 state=present
  when: conf_attic_client == true and conf_attic_pip == true
  tags: [ attic ]

- name: ensure atticmatic pip package is present
  pip: name=atticmatic executable=pip3 version=0.1.7 state=present
  when: conf_attic_client == true
  tags: [ attic ]

- name: create /etc/atticmatic
  file: path=/etc/atticmatic state=directory owner=root group=adm mode=0750
  when: conf_attic_client == true
  tags: [ attic, atticmatic ]

- name: deploy /etc/atticmatic/id_rsa-attic
  copy: content="{{ conf_users.attic.private_key }}" dest=/etc/atticmatic/id_rsa-attic owner=nagios group=adm mode=600 backup=yes
  when: conf_attic_client == true
  tags: [ attic, atticmatic ]

- name: create /root/.ssh
  file: path=/root/.ssh state=directory owner=root group={{ conf_root_group }} mode=0700
  when: conf_attic_client == true
  tags: [ attic, atticmatic ]

- name: deploy /root/.ssh/config
  template: src=root/.ssh/config.j2 dest=/root/.ssh/config owner=root group={{ conf_root_group }} mode=0600
  when: conf_attic_client == true and conf_attic_deploy_ssh_config == true
  tags: [ attic, atticmatic ]

#
# Check if remote repo exists, if not create
#
- name: check if remote attic repo exists
  # shell: 'su - attic -c "attic list {{ conf_attic_user }}@{{ conf_attic_host }}:{{ conf_attic_repo }}"'
  shell: 'attic list {{ conf_attic_user }}@{{ conf_attic_host }}:{{ conf_attic_repo }}'
  ignore_errors: yes
  register: attic_repo_check_res
  failed_when: attic_repo_check_res.rc != 0
  when: conf_attic_client == true
  tags: [ attic ]

# sudo su - attic -c "ssh attic@node.foo.org"
- name: init remote attic repo
  # shell: 'su - attic -c "attic init {{ conf_attic_user }}@{{ conf_attic_host }}:{{ conf_attic_repo }}"'
  shell: 'attic init {{ conf_attic_user }}@{{ conf_attic_host }}:{{ conf_attic_repo }}'
  when: attic_repo_check_res.rc != 0
  tags: [ attic ]

#
# At this point we have a sane attic repo for this host on a remote server
#

- name: deploy /etc/atticmatic/config
  template: src=etc/atticmatic/config.j2 dest=/etc/atticmatic/config owner=root group={{ conf_root_group }} mode=0644
  when: conf_attic_client == true
  tags: [ attic, atticmatic ]

- name: deploy /etc/cron.d/atticmatic
  template: src=etc/cron.d/atticmatic.j2 dest=/etc/cron.d/atticmatic owner=root group={{ conf_root_group }} mode=0644
  when: conf_attic_client == true
  tags: [ attic, atticmatic ]

#
# innobackupex --compress --galera-info
# innobackupex --apply-log
#
- name: be sure percona-xtrabackup packages is installed (Debian family)
  apt: pkg={{ item }} state=present
  with_items:
    - percona-xtrabackup
  when: conf_attic_client == true and conf_attic_mysqldump == true and ansible_os_family == "Debian"
  tags: [ attic, atticmatic ]

- name: create mysql backup directory
  file: path=/{{ conf_attic_mysqldump_source }} state=directory owner=root group=adm mode=0750
  ignore_errors: yes
  when: conf_attic_client == true and conf_attic_mysqldump == true and conf_attic_mysqldump_source_create == true
  tags: [ attic, atticmatic ]

- name: deploy /usr/local/bin/atticmatic-mysql.sh
  template: src=usr/local/bin/atticmatic-mysql.sh.j2 dest=/usr/local/bin/atticmatic-mysql.sh owner=root group={{ conf_root_group }} mode=0755
  when: conf_attic_client == true and conf_attic_mysqldump == true
  tags: [ attic, atticmatic ]

- name: deploy /usr/local/bin/innobackupex-runner.sh
  template: src=usr/local/bin/innobackupex-runner.sh.j2 dest=/usr/local/bin/innobackupex-runner.sh owner=root group={{ conf_root_group }} mode=0755
  when: conf_attic_client == true and conf_attic_mysqldump == true
  tags: [ attic, atticmatic ]

- name: deploy /usr/local/bin/innobackupex-restore.sh
  template: src=usr/local/bin/innobackupex-restore.sh.j2 dest=/usr/local/bin/innobackupex-restore.sh owner=root group={{ conf_root_group }} mode=0755
  when: conf_attic_client == true and conf_attic_mysqldump == true
  tags: [ attic, atticmatic ]

#
# elasticdump
#
- name: be sure nodejs packages packages are installed (Debian family)
  apt: pkg={{ item }} state=present force=yes
  with_items:
    - npm
  when: conf_attic_client == true and conf_attic_elasticdump == true and ansible_os_family == "Debian"
  tags: [ attic, atticmatic ]

- name: be sure nodejs packages packages are installed (Debian family)
  apt: pkg={{ item }} state=present force=yes
  with_items:
    - nodejs
    - nodejs-legacy
  when: conf_attic_client == true and conf_attic_elasticdump == true and ansible_os_family == "Debian"
  tags: [ attic, atticmatic ]

- name: ensure elasticdump packages are present
  npm: name={{ item }} global=yes state=present
  with_items:
    - elasticdump
  when: conf_attic_client == true and conf_attic_elasticdump == true and ansible_os_family == "Debian"
  tags: [ attic, atticmatic ]

- name: deploy /usr/local/bin/atticmatic-elasticsearch.sh
  template: src=usr/local/bin/atticmatic-elasticsearch.sh.j2 dest=/usr/local/bin/atticmatic-elasticsearch.sh owner=root group={{ conf_root_group }} mode=0755
  when: conf_attic_client == true and conf_attic_elasticdump == true
  tags: [ attic, atticmatic ]

# TODO
#
#   - /etc/atticmatic/excludes
