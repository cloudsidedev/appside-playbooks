---

# file: playbooks/roles/common/tasks/docker.yml

# Good starting point: https://github.com/angstwad/docker.ubuntu

# Containers
#
#   - Create /var/lib/appflow/

- name: python-pip (Debian family)
  apt: pkg={{ item }} state=present
  with_items:
    - python-pip
  environment:
    DEBIAN_FRONTEND: noninteractive
  when: ansible_os_family == "Debian"
  tags: [ docker ]

- name: install docker-py (pip3)
  pip: name={{ item }} executable=pip3 state=present
  with_items:
    - docker-py
  tags: [ docker ]

- name: install docker-py and docker-compose (pip)
  pip: name={{ item }} state=present
  with_items:
    - docker-py
    # - docker-compose
  tags: [ docker ]

- name: remove conflicting Docker packages (Debian family)
  apt: pkg={{ item }} state=absent
  with_items:
    - docker
    # - docker-engine
    - docker.io
  environment:
    DEBIAN_FRONTEND: noninteractive
  when: ansible_os_family == "Debian"
  tags: [ docker ]

- name: Install linux-image-extra-* packages to enable AuFS driver
  apt: pkg={{ item }} state=present
  with_items:
    - linux-image-extra-{{ ansible_kernel }}
    - linux-image-extra-virtual
  when: ansible_os_family == "Debian" and ansible_distribution_version|version_compare('14.04', '==')
  register: linux_image_extra_install
  ignore_errors: yes
  tags: [ docker ]

- name: Docker apt-key (Debian family)
  apt_key: id="58118E89F3A912897C070ADBF76221572C52609D" keyserver="hkp://p80.pool.sks-keyservers.net:80" state=present
  when: ansible_os_family == "Debian" and ansible_lsb.major_release|int < 18
  register: add_repository_key
  ignore_errors: yes
  tags: [ docker ]

- name: Docker apt-key (Debian family) | Alternative
  shell: "curl -sSL {{ apt_key_url }} | sudo apt-key add -"
  when: ansible_os_family == "Debian" and ansible_lsb.major_release|int < 18
  tags: [ docker ]

- name: docker repo (Debian family)
  apt_repository: repo="deb https://apt.dockerproject.org/repo {{ ansible_lsb.id|lower }}-{{ ansible_lsb.codename|lower }} main" update_cache=yes
  when: ansible_os_family == "Debian" and ansible_lsb.major_release|int < 18
  tags: [ docker ]

- name: docker packages (Debian family)
  apt: pkg={{ item }} update_cache=yes state=latest
  with_items:
    - docker-engine
  when:
    - ansible_os_family == "Debian" and ansible_lsb.major_release|int < 18
  ignore_errors: true
  tags: [ docker ]

- name: docker.io packages (Debian family, >= 18.04)
  apt: pkg={{ item }} update_cache=yes state=latest
  with_items:
    - docker.io
  when:
    - ansible_os_family == "Debian" and ansible_lsb.major_release|int >= 18
  ignore_errors: true
  tags: [ docker ]

- name: Add users to the docker group
  user:
    name: "{{ item }}"
    groups: docker
    append: yes
  with_items: "{{ conf_docker_group_members }}"
  when: conf_docker_group_members is defined

- name: provision configs (Debian family)
  template: src=etc/{{ item }}.j2 dest={{ conf_local_etc_path }}/{{ item }} owner=root group={{ conf_root_group }} mode=0644
  with_items:
      - default/docker
  when:
    - ansible_os_family == "Debian"
  notify: handle_restart_docker
  tags: [ docker, docker-conf ]

# - name: provision service (Debian family)
#   template: src=lib/{{ item }}.j2 dest=/lib/{{ item }} owner=root group={{ conf_root_group }} mode=0644
#   with_items:
#       - systemd/system/docker.service
#   when:
#     - ansible_os_family == "Debian"
#   notify: handle_restart_docker
#   tags: [ docker, docker-conf ]

# - name: install docker-compose
#   get_url: url={{ conf_docker_compose_url }} dest=/usr/local/bin/docker-compose force=yes
#   tags: [ docker, docker-compose ]

# - name: set permissions on docker-compose binary
#   file: path=/usr/local/bin/docker-compose mode=0755
#   tags: [ docker, docker-compose ]

- name: create persistent storage folder
  file: path={{ conf_docker_persistent_storage_path }} state=directory owner=root group=docker mode=0755
  tags: [ docker, docker-conf, docker-containers ]

- name: create persistent storage folder for containers
  file: path={{ conf_docker_persistent_storage_path }}/{{ item.key }} state=directory owner=root group=docker mode=0755
  when: item.value.state != "absent" and item.value.volumes is defined
  with_dict: '{{ conf_docker_containers }}'
  tags: [ docker, docker-conf, docker-containers ]

- name: provision docker networks
  docker_network:
    name: "{{ item.value.name|default(item.key) }}"
    state: "{{ item.value.state }}"
    driver: "{{ item.value.driver|default('bridge') }}"
    # recreate: "{{ item.value.recreate }}"
    # image: "{{ item.value.image }}"
    # restart_policy: "{{ item.value.restart_policy }}"
    # user: "{{ item.value.user|default(None) }}"    
    # exposed_ports: "{{ item.value.exposed_ports|default([]) }}"
    # published_ports: "{{ item.value.published_ports|default([]) }}"
    # volumes: "{{ item.value.volumes|default([]) }}"
    # links: "{{ item.value.links|default([]) }}"
    # command: "{{ item.value.command|default([]) }}"
    # env: "{{ item.value.env|default('appflow_version=rolling') }}"
  with_dict: '{{ conf_docker_networks }}'
  ignore_errors: yes
  tags: [ docker, docker-conf, docker-networks ]

- name: provision docker containers
  docker_container:
    name: "{{ item.value.name|default(item.key) }}"
    state: "{{ item.value.state }}"
    recreate: "{{ item.value.recreate }}"
    image: "{{ item.value.image }}"
    restart_policy: "{{ item.value.restart_policy }}"
    hostname: "{{ item.value.hostname|default(None) }}"
    user: "{{ item.value.user|default(None) }}"
    privileged : "{{ item.value.privileged|default('no') }}"
    exposed_ports: "{{ item.value.exposed_ports|default([]) }}"
    published_ports: "{{ item.value.published_ports|default([]) }}"
    volumes: "{{ item.value.volumes|default([]) }}"
    network_mode: "{{ item.value.network_mode|default('bridge') }}"
    networks: "{{ item.value.networks|default([]) }}"
    links: "{{ item.value.links|default([]) }}"
    # entrypoint: "{{ item.value.entrypoint }}"
    # command: "{{ item.value.command|default('') }}"
    env: "{{ item.value.env|default('appflow_version=rolling') }}"
    etc_hosts: "{{ item.value.etc_hosts|default({'dockerhost':'172.17.0.1'}) }}"
    labels: "{{ item.value.labels|default('appflow_version=rolling') }}"
  with_dict: '{{ conf_docker_containers }}'
  ignore_errors: yes
  tags: [ docker, docker-conf, docker-containers ]

- name: provision docker containers (command)
  docker_container:
    name: "{{ item.value.name|default(item.key) }}"
    state: "{{ item.value.state }}"
    recreate: "{{ item.value.recreate }}"
    image: "{{ item.value.image }}"
    restart_policy: "{{ item.value.restart_policy }}"
    hostname: "{{ item.value.hostname|default(None) }}"
    user: "{{ item.value.user|default(None) }}"
    privileged : "{{ item.value.privileged|default('no') }}"
    exposed_ports: "{{ item.value.exposed_ports|default([]) }}"
    published_ports: "{{ item.value.published_ports|default([]) }}"
    volumes: "{{ item.value.volumes|default([]) }}"
    networks: "{{ item.value.networks|default([]) }}"
    links: "{{ item.value.links|default([]) }}"
    # entrypoint: "{{ item.value.entrypoint }}"
    command: "{{ item.value.command|default('') }}"
    env: "{{ item.value.env|default('appflow_version=rolling') }}"
    etc_hosts: "{{ item.value.etc_hosts|default({'dockerhost':'172.17.0.1'}) }}"
    labels: "{{ item.value.labels|default('appflow_version=rolling') }}"
  with_dict: '{{ conf_docker_containers }}'
  when: item.value.command is defined
  ignore_errors: yes
  tags: [ docker, docker-conf, docker-containers ]

- name: provision docker containers (entrypoint / command)
  docker_container:
    name: "{{ item.value.name|default(item.key) }}"
    state: "{{ item.value.state }}"
    recreate: "{{ item.value.recreate }}"
    image: "{{ item.value.image }}"
    restart_policy: "{{ item.value.restart_policy }}"
    hostname: "{{ item.value.hostname|default(None) }}"
    user: "{{ item.value.user|default(None) }}"
    privileged : "{{ item.value.privileged|default('no') }}"
    exposed_ports: "{{ item.value.exposed_ports|default([]) }}"
    published_ports: "{{ item.value.published_ports|default([]) }}"
    volumes: "{{ item.value.volumes|default([]) }}"
    networks: "{{ item.value.networks|default([]) }}"
    links: "{{ item.value.links|default([]) }}"
    entrypoint: "{{ item.value.entrypoint }}"
    command: "{{ item.value.command|default('') }}"
    env: "{{ item.value.env|default('appflow_version=rolling') }}"
    etc_hosts: "{{ item.value.etc_hosts|default({'dockerhost':'172.17.0.1'}) }}"
    labels: "{{ item.value.labels|default('appflow_version=rolling') }}"
  with_dict: '{{ conf_docker_containers }}'
  when: item.value.entrypoint is defined and item.value.command is defined
  ignore_errors: yes
  tags: [ docker, docker-conf, docker-containers ]

#
# sudo apt install python3-docker
# sudo apt install python-docker
# sudo pip install --upgrade docker-compose
# sudo pip3 install --upgrade docker-compose
#
- name: provision docker services
  docker_service:
    project_name: "{{ item.value.project_name|default(item.key) }}"
    state: "{{ item.value.state }}"
    definition: "{{ item.value.definition|from_yaml }}"
  with_dict: '{{ conf_docker_services }}'
  ignore_errors: yes
  tags: [ docker, docker-conf, docker-services ]

# - name: provision docker stacks
#   docker_stack:
#     name: "{{ item.value.name|default(item.key) }}"
#     state: "{{ item.value.state }}"
#     compose_yaml: "{{ item.value.compose_yaml }}"
#   with_dict: '{{ conf_docker_stacks }}'
#   ignore_errors: yes
#   tags: [ docker, docker-conf, docker-stacks ]
