---

# file: playbooks/roles/lb/tasks/haproxy.yml
#
# apt_repository: repo='ppa:vbernat/haproxy-1.6' validate_certs=no update_cache=yes
# apt_repository: repo='ppa:vbernat/haproxy-1.6'
#

# Debian
- name: install xinetd (Debian family)
  apt: pkg={{ item }} state=latest force=yes
  with_items:
    - xinetd
  environment:
    DEBIAN_FRONTEND: noninteractive
  when: ansible_os_family == "Debian" and conf_env != "development" and conf_galera_cluster == true
  ignore_errors: yes
  tags: [ haproxy, ssl ]

# RedHat
- name: install xinetd (RedHat family)
  yum: pkg={{ item }} state=latest
  with_items:
    - xinetd
  when: ansible_os_family == "RedHat" and conf_env != "development" and conf_galera_cluster == true
  ignore_errors: yes
  tags: [ haproxy, ssl ]

################
# HAPROXY BASE #
################
# Ubuntu
- name: haproxy apt-key (Ubuntu)
  apt_key: data="{{ lookup('file', 'haproxy/haproxy.gpg') }}" state=present
  when: ansible_distribution == "Ubuntu"
  tags: [ haproxy, ssl ]

- name: disable repo ppa:vbernat/haproxy-1.5 (Ubuntu)
  apt_repository: repo='deb http://ppa.launchpad.net/vbernat/haproxy-1.5/ubuntu {{ ansible_distribution_release }} main' update_cache=yes state=absent
  when: ansible_distribution == "Ubuntu"
  tags: [ haproxy, ssl ]

- name: enable repo ppa:vbernat/haproxy-1.6 (Ubuntu)
  apt_repository: repo='deb http://ppa.launchpad.net/vbernat/haproxy-1.6/ubuntu {{ ansible_distribution_release }} main' update_cache=yes
  when: ansible_distribution == "Ubuntu" and ansible_lsb.major_release|int < 18
  tags: [ haproxy, ssl ]

- name: be sure latest haproxy packages are installed (Ubuntu)
  apt: pkg={{ item }} state=latest
  with_items:
    - haproxy
  when: ansible_distribution == "Ubuntu"
  environment:
    DEBIAN_FRONTEND: noninteractive
  tags: [ haproxy, ssl ]

# RedHat
- name: be sure latest haproxy packages are installed (RedHat Family)
  yum: pkg={{ item }} state=latest
  with_items:
    - haproxy
  when:
     - ansible_os_family == "RedHat"
  tags: [ haproxy, ssl ]

- name: enable haproxy (Ubuntu)
  lineinfile: "dest=/etc/default/haproxy regexp='^ENABLED=0' line='ENABLED=1'"
  when: ansible_os_family == "Debian"
  tags: [ haproxy, ssl ]

# RedHat/CentOS -> use systemctl to enable haproxy
- name: enable haproxy (RedHat Family)
  service: name=haproxy state=started enabled=yes
  when: ansible_os_family == "RedHat"
  tags: [ haproxy, ssl ]

############
# SSL BASE #
############
- name: ssl-certs group
  group: name=ssl-cert state=present
  when: ansible_os_family == "RedHat"
  tags: [ haproxy, ssl, ssl-conf ]

- name: Make sure haproxy user is in ssl-cert
  user: name=haproxy groups=haproxy,ssl-cert
  when: ansible_os_family == "RedHat"
  tags: [ haproxy, ssl, ssl-conf ]

- name: /etc/certs
  file: path=/etc/certs mode=750 state=directory owner=root group=ssl-cert
  tags: [ haproxy, ssl, ssl-conf ]

###########
# SSL PEM #
###########

- name: deploy vhost PEM (Debian/RedHat family)
  copy: content="{{ item.value.ssl_pem }}" dest="/etc/certs/{{ item.value.ssl_pemfile }}" owner=root group=ssl-cert mode=0640
  when:
    - ansible_os_family == "Debian" or ansible_os_family == "RedHat"
    - item.value.state == "enabled" and item.value.ssl_haproxy == true
  with_dict: '{{ conf_vhosts_common }}'
  notify: handle_reload_haproxy
  tags: [ haproxy, ssl, ssl-conf ]

##################
# HAPROXY CONFIG #
##################

#
# Idea:
#
# 1) Deploy cfg to /tmp
# 2) haproxy -f /etc/haproxy/haproxy.cfg -c
# 3) if OK deploy to /etc/haproxy/haproxy.cfg
#

- name: deploy /etc/haproxy/haproxy.cfg (Debian/RedHat family)
  template: src=etc/haproxy/haproxy-cfg.j2 dest=/etc/haproxy/haproxy.cfg owner=root group={{ conf_root_group }} mode=0644
  notify: handle_reload_haproxy
  when:
    - ansible_os_family == "Debian" or ansible_os_family == "RedHat"
    - conf_confd_enable is defined and conf_confd_enable == false
  tags: [ haproxy, haproxy-conf, ssl, haproxy-acl ]

- name: deploy /etc/haproxy/*acl-files*.txt (Debian/RedHat family)
  copy: content="{{ item.value.content }}" dest="/etc/haproxy/{{ item.key }}" owner=root group={{ conf_root_group }} mode=0644
  with_dict: '{{ conf_haproxy_acl_files }}'
  notify: handle_reload_haproxy
  when:
    - ansible_os_family == "Debian" or ansible_os_family == "RedHat"
    - conf_confd_enable is defined and conf_confd_enable == false
    - item.value.state == "present"
  tags: [ haproxy, haproxy-conf, haproxy-acl ]

- name: re-start xinetd
  service: name=xinetd enabled=yes state=restarted
  when: conf_haproxy_pxc_backend is defined and conf_galera_cluster == true
  tags: [ haproxy, haproxy-conf, ssl ]

- name: re-start haproxy
  service: name=haproxy enabled=yes state=restarted
  tags: [ haproxy, haproxy-conf, ssl ]
